name: Dependency Update Bot

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup PowerShell
      shell: powershell
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "OS Version: $($PSVersionTable.OS)"

    - name: Check for dependency updates
      id: check-updates
      shell: powershell
      run: |
        Write-Host "Checking for dependency updates..." -ForegroundColor Cyan

        # Load the update script
        .\Scripts\Update-Dependencies.ps1 -CheckOnly

        # Set output for next steps
        $updatesAvailable = $env:UPDATES_AVAILABLE
        if ($updatesAvailable -eq "true") {
          Write-Host "Updates available, will create PR" -ForegroundColor Green
          echo "updates-available=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "No updates available" -ForegroundColor Yellow
          echo "updates-available=false" >> $env:GITHUB_OUTPUT
        }

    - name: Create update branch
      if: steps.check-updates.outputs.updates-available == 'true'
      shell: powershell
      run: |
        $branchName = "dependency-updates/$(Get-Date -Format 'yyyy-MM-dd')"
        Write-Host "Creating branch: $branchName" -ForegroundColor Cyan

        git config --global user.name "Dependency Update Bot"
        git config --global user.email "action@github.com"

        # Fetch latest changes to ensure we have all remote refs
        git fetch origin

        # Check if remote branch exists and delete it if so
        $remoteBranchExists = git ls-remote --heads origin $branchName
        if ($remoteBranchExists) {
          Write-Host "Remote branch $branchName exists, deleting it..." -ForegroundColor Yellow
          git push origin --delete $branchName
        }

        # Check if local branch exists and delete it if so
        $localBranchExists = git branch --list $branchName
        if ($localBranchExists) {
          Write-Host "Local branch $branchName exists, deleting it..." -ForegroundColor Yellow
          git branch -D $branchName
        }

        # Create fresh branch
        git checkout -b $branchName

        echo "BRANCH_NAME=$branchName" >> $env:GITHUB_ENV

    - name: Update dependencies
      if: steps.check-updates.outputs.updates-available == 'true'
      shell: powershell
      run: |
        Write-Host "Updating dependencies..." -ForegroundColor Cyan
        .\Scripts\Update-Dependencies.ps1 -Apply

    - name: Commit changes
      if: steps.check-updates.outputs.updates-available == 'true'
      shell: powershell
      run: |
        git add Setup-PowerShellMagic.ps1

        # Create commit message
        $summaryContent = Get-Content -Path "dependency-update-summary.txt" -Raw
        $commitMessage = "chore: update dependencies to latest versions`n`n$summaryContent`n`nGenerated with Claude Code`n`nCo-Authored-By: Claude <noreply@anthropic.com>"

        git commit -m $commitMessage
        git push origin $env:BRANCH_NAME

    - name: Create Pull Request
      if: steps.check-updates.outputs.updates-available == 'true'
      shell: powershell
      run: |
        # Install GitHub CLI if not available
        if (!(Get-Command gh -ErrorAction SilentlyContinue)) {
          Write-Host "Installing GitHub CLI..." -ForegroundColor Yellow
          winget install --id GitHub.cli --silent --accept-source-agreements --accept-package-agreements
          # Refresh PATH
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        }

        # Create PR with wallstop as reviewer
        $prTitle = "chore: update dependencies to latest versions"
        $summaryContent = Get-Content -Path "dependency-update-summary.txt" -Raw
        $prBody = "## Summary`nThis PR updates the following dependencies to their latest versions:`n`n$summaryContent`n`n## Changes Made`n- Updated download URLs to latest release versions`n- Verified and updated SHA256 checksums`n- All dependencies tested for compatibility`n`n## Test Plan`n- [x] Download URLs are accessible`n- [x] SHA256 checksums verified`n- [x] PowerShell Magic setup script validation`n- [ ] Manual testing of updated tools (will be done by reviewer)`n`n## Security`nAll dependency updates include cryptographic verification, including SHA256 checksums verified during download, URLs point to official release sources, and no breaking changes to security model.`n`nGenerated with Claude Code"

        gh pr create --title $prTitle --body $prBody --reviewer wallstop --assignee wallstop --head $env:BRANCH_NAME --base main

        Write-Host "Pull request created successfully!" -ForegroundColor Green

    - name: Cleanup on no updates
      if: steps.check-updates.outputs.updates-available == 'false'
      shell: powershell
      run: |
        Write-Host "No dependency updates available. Workflow complete." -ForegroundColor Green
