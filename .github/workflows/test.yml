name: PowerShell Magic CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test PowerShell Magic
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install PowerShell 7
      uses: PowerShell/actions-setup-pwsh@v2
      with:
        version: '7.4.x'

    - name: Setup PowerShell
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "OS Version: $($PSVersionTable.OS)"

    - name: Run formatting checks
      run: |
        Write-Host "Running PowerShell formatting checks..." -ForegroundColor Cyan
        .\Format-PowerShell.ps1 -Check
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Formatting check failed"
          exit $LASTEXITCODE
        }

    - name: Run markdown lint
      run: |
        Write-Host "Running markdownlint with auto-fix..." -ForegroundColor Cyan
        if (-not (Get-Command npx -ErrorAction SilentlyContinue)) {
          Write-Error "npx (Node.js) is required to run markdownlint-cli"
          exit 1
        }
        npx markdownlint-cli@0.41.0 --config .markdownlint.json --fix . --ignore CHANGELOG.md
        git diff --name-only --exit-code

    - name: Run unit tests
      run: |
        Write-Host "Running PowerShell unit tests..." -ForegroundColor Cyan
        .\Tests\Test-PowerShellMagic.ps1
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Unit tests failed"
          exit $LASTEXITCODE
        }

    - name: Run comprehensive test suite
      run: |
        Write-Host "Running comprehensive test suite..." -ForegroundColor Cyan
        .\Run-Tests.ps1 -CI
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Test suite failed"
          exit $LASTEXITCODE
        }

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/*.log
          **/*.xml
        retention-days: 7

  validate-modules:
    name: Validate PowerShell Modules
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install PowerShell 7
      uses: PowerShell/actions-setup-pwsh@v2
      with:
        version: '7.4.x'

    - name: Test module imports
      run: |
        Write-Host "Testing PowerShell module imports..." -ForegroundColor Cyan

        $modules = @(
          ".\Modules\QuickJump\QuickJump.psm1",
          ".\Modules\Templater\Templater.psm1",
          ".\Modules\Unitea\Unitea.psm1"
        )

        $success = $true

        foreach ($module in $modules) {
          try {
            Write-Host "Testing import: $module" -ForegroundColor Yellow
            Import-Module $module -Force -ErrorAction Stop
            Write-Host "Successfully imported: $module" -ForegroundColor Green
            $moduleName = [System.IO.Path]::GetFileNameWithoutExtension($module)
            Remove-Module $moduleName -Force -ErrorAction SilentlyContinue
          }
          catch {
            Write-Error "Failed to import: $module - $($_.Exception.Message)"
            $success = $false
          }
        }

        if (-not $success) {
          Write-Error "Module validation failed"
          exit 1
        }

        Write-Host 'All modules imported successfully!' -ForegroundColor Green

        if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) { exit $LASTEXITCODE }

  security-scan:
    name: Security Scan
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Run PSScriptAnalyzer security rules
      shell: powershell
      run: |
        Write-Host "Running security analysis..." -ForegroundColor Cyan

        # Install PSScriptAnalyzer if not available
        if (!(Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        }

        # Get all PowerShell files
        $files = Get-ChildItem -Recurse -Include "*.ps1", "*.psm1", "*.psd1" -ErrorAction SilentlyContinue | Where-Object {
          $null -ne $_ -and
          $null -ne $_.FullName -and
          $_.FullName -notmatch "\\\.git\\" -and
          $_.FullName -notmatch "\\bin\\" -and
          $_.FullName -notmatch "\\obj\\"
        }

        if ($null -eq $files -or $files.Count -eq 0) {
          Write-Warning "No PowerShell files found to scan"
          Write-Host "Security scan completed successfully!" -ForegroundColor Green
          return
        }

        Write-Host "Found $($files.Count) PowerShell files to scan" -ForegroundColor Cyan

        $criticalIssues = @()

        foreach ($file in $files) {
          if ($null -eq $file -or $null -eq $file.FullName) {
            Write-Warning "Skipping null or invalid file reference"
            continue
          }

          Write-Host "Scanning: $($file.Name)" -ForegroundColor Yellow

          try {
            $results = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Error, Warning
            $securityIssues = $results | Where-Object { $_.RuleName -like "*Security*" -or $_.Severity -eq "Error" }
          } catch {
            Write-Warning "Failed to analyze $($file.FullName): $($_.Exception.Message)"
            continue
          }

          if ($securityIssues) {
            $criticalIssues += $securityIssues
            foreach ($issue in $securityIssues) {
              Write-Warning "$($file.Name):$($issue.Line) - $($issue.RuleName): $($issue.Message)"
            }
          }
        }

        if ($criticalIssues.Count -gt 0) {
          Write-Error "Security scan found $($criticalIssues.Count) critical issues"
          exit 1
        }

        Write-Host "Security scan completed successfully!" -ForegroundColor Green

  matrix-test:
    name: Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Show PowerShell environment
      shell: pwsh
      run: |
        Write-Host "Operating System: $($PSVersionTable.OS)" -ForegroundColor Cyan
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Cyan

    - name: Run cross-platform test suite
      shell: pwsh
      run: |
        ./Run-Tests.ps1 -CI
