#requires -Version 7.0
<#!
.SYNOPSIS
Validates the artifacts produced by Scripts/Build-Modules.ps1.

.DESCRIPTION
Ensures module-metadata.json exists, parses correctly, and that each package
listed matches the recorded SHA256 hash while referencing existing files.

.PARAMETER MetadataPath
Path to module-metadata.json generated by the build script.

.PARAMETER PackageRoot
Directory containing the `.nupkg` packages referenced by the metadata file.

.EXAMPLE
pwsh -NoProfile -File Scripts/Test-BuildArtifacts.ps1 -MetadataPath out/packages/module-metadata.json
#>
[CmdletBinding()]
param(
    [string]$MetadataPath = (Join-Path (Get-Location) 'out/packages/module-metadata.json'),
    [string]$PackageRoot = (Join-Path (Get-Location) 'out/packages')
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Test-NotNullOrWhiteSpace {
    param(
        [Parameter(Mandatory)]
        [string]$Value,
        [Parameter(Mandatory)]
        [string]$PropertyName
    )

    if ([string]::IsNullOrWhiteSpace($Value)) {
        throw "Metadata property '$PropertyName' cannot be null or whitespace."
    }
}

if (-not (Test-Path -LiteralPath $MetadataPath)) {
    throw "Metadata file '$MetadataPath' was not found. Run Scripts/Build-Modules.ps1 first."
}

$metadataJson = Get-Content -LiteralPath $MetadataPath -Raw -ErrorAction Stop
if ([string]::IsNullOrWhiteSpace($metadataJson)) {
    throw "Metadata file '$MetadataPath' is empty."
}

try {
    $metadata = $metadataJson | ConvertFrom-Json -ErrorAction Stop
} catch {
    throw "Failed to parse metadata JSON: $($_.Exception.Message)"
}

if (-not $metadata) {
    throw 'Metadata list is empty.'
}

if ($metadata -isnot [System.Array]) {
    $metadata = @($metadata)
}

foreach ($entry in $metadata) {
    Test-NotNullOrWhiteSpace -Value $entry.Name -PropertyName 'Name'
    Test-NotNullOrWhiteSpace -Value $entry.Version -PropertyName 'Version'
    Test-NotNullOrWhiteSpace -Value $entry.PackagePath -PropertyName 'PackagePath'
    Test-NotNullOrWhiteSpace -Value $entry.PackageHashSha256 -PropertyName 'PackageHashSha256'

    $expectedPath = if (Test-Path -LiteralPath $entry.PackagePath) {
        (Resolve-Path -LiteralPath $entry.PackagePath).Path
    } else {
        $candidate = Join-Path $PackageRoot (Split-Path $entry.PackagePath -Leaf)
        if (-not (Test-Path -LiteralPath $candidate)) {
            throw "Package file for module '$($entry.Name)' not found at '$($entry.PackagePath)' or '$candidate'."
        }
        (Resolve-Path -LiteralPath $candidate).Path
    }

    $actualHash = (Get-FileHash -LiteralPath $expectedPath -Algorithm SHA256).Hash.ToUpperInvariant()
    $expectedHash = $entry.PackageHashSha256.ToUpperInvariant()
    if ($actualHash -ne $expectedHash) {
        throw "SHA256 mismatch for '$($entry.Name)': expected $expectedHash, got $actualHash."
    }

    if ($entry.FunctionsToExport -and ($entry.FunctionsToExport -isnot [System.Array])) {
        throw "FunctionsToExport for '$($entry.Name)' must be an array."
    }

    if ($entry.AliasesToExport -and ($entry.AliasesToExport -isnot [System.Array])) {
        throw "AliasesToExport for '$($entry.Name)' must be an array."
    }
}

Write-Host "Metadata validation succeeded for $($metadata.Count) module(s)." -ForegroundColor Green
