#Requires -Version 5.1

<#
.SYNOPSIS
Setup script for PowerShell Magic pre-commit hooks

.DESCRIPTION
This script installs and configures pre-commit hooks for the PowerShell Magic repository.
It supports both Python pre-commit framework and native Git hooks.

.PARAMETER Method
Installation method: 'precommit' (Python pre-commit), 'git' (native Git hooks), or 'both'

.PARAMETER Force
Force reinstallation of hooks

.EXAMPLE
.\Setup-Hooks.ps1
Install pre-commit hooks using the best available method

.EXAMPLE
.\Setup-Hooks.ps1 -Method precommit
Install using Python pre-commit framework

.EXAMPLE
.\Setup-Hooks.ps1 -Method git -Force
Force install native Git hooks
#>

[CmdletBinding()]
param(
    [ValidateSet('precommit', 'git', 'both', 'auto')]
    [string]$Method = 'auto',
    [switch]$Force
)

# Color output functions
function Write-Success { param($Message) Write-Host "âœ… $Message" -ForegroundColor Green }
function Write-Info {
    param($Message) Write-Host 'â'¹ $Message" -ForegroundColor Cyan
}
function Write-Warning { param($Message) Write-Host "âš ï¸ $Message" -ForegroundColor Yellow }
function Write-Error { param($Message) Write-Host "âŒ $Message" -ForegroundColor Red }

function Test-PreCommitFramework {
    try {
        $null = Get-Command 'pre-commit' -ErrorAction Stop
        return $true
    } catch {
        return $false
    }
}

function Test-PythonAvailable {
    try {
        $null = Get-Command 'python' -ErrorAction Stop
        return $true
    } catch {
        try {
            $null = Get-Command 'python3' -ErrorAction Stop
            return $true
        } catch {
            return $false
        }
    }
}

function Test-GitRepository {
    try {
        $null = git rev-parse --git-dir 2>$null
        return $LASTEXITCODE -eq 0
    } catch {
        return $false
    }
}

function Install-PreCommitFramework {
    Write-Info 'Installing Python pre-commit framework...'

    if (-not (Test-PythonAvailable)) {
        Write-Error 'Python is required for pre-commit framework'
        Write-Info 'Install Python from: https://python.org'
        return $false
    }

    try {
        # Install pre-commit
        Write-Info 'Installing pre-commit via pip...'
        python -m pip install pre-commit

        if ($LASTEXITCODE -ne 0) {
            Write-Error 'Failed to install pre-commit framework'
            return $false
        }

        # Install hooks
        Write-Info 'Installing pre-commit hooks...'
        pre-commit install

        if ($LASTEXITCODE -ne 0) {
            Write-Error 'Failed to install pre-commit hooks'
            return $false
        }

        Write-Success 'Pre-commit framework installed successfully'
        return $true

    } catch {
        Write-Error "Failed to install pre-commit framework: $($_.Exception.Message)"
        return $false
    }
}

function Install-GitHooks {
    Write-Info 'Installing native Git hooks...'

    $gitHooksDir = '.git\hooks'
    $sourceHooksDir = 'hooks'

    if (-not (Test-Path $gitHooksDir)) {
        Write-Error "Git hooks directory not found: $gitHooksDir"
        return $false
    }

    if (-not (Test-Path $sourceHooksDir)) {
        Write-Error "Source hooks directory not found: $sourceHooksDir"
        return $false
    }

    try {
        # Copy PowerShell pre-commit hook
        $sourcePSHook = Join-Path $sourceHooksDir 'pre-commit.ps1'
        $targetPSHook = Join-Path $gitHooksDir 'pre-commit.ps1'

        if (Test-Path $sourcePSHook) {
            Copy-Item $sourcePSHook $targetPSHook -Force
            Write-Success 'Copied PowerShell pre-commit hook'
        }

        # Create or update the main pre-commit hook
        $targetHook = Join-Path $gitHooksDir 'pre-commit'
        $hookContent = @"
    #!/bin/bash
    # Git pre-commit hook for PowerShell Magic
    # Auto-generated by Setup-Hooks.ps1

    # Try to run PowerShell hook first
    if Get-Command -v powershell.exe >/dev/null 2>&1; then
    exec powershell.exe -ExecutionPolicy Bypass -File "`$(git rev-parse --show-toplevel)/hooks/pre-commit.ps1"
    elif command -v pwsh >/dev/null 2>&1; then
    exec pwsh -ExecutionPolicy Bypass -File "`$(git rev-parse --show-toplevel)/hooks/pre-commit.ps1"
    else
    # Fallback to bash hook if available
    HOOK_FILE="`$(git rev-parse --show-toplevel)/hooks/pre-commit"
    if [ -f "`$HOOK_FILE" ]; then
    exec "`$HOOK_FILE"
    else
    Write-Output 'âŒ No PowerShell found and no bash hook available'
    exit 1
    fi
    fi
    "@

        Set-Content -Path $targetHook -Value $hookContent -Encoding UTF8

        # Make executable (on Unix-like systems)
        if ($IsLinux -or $IsMacOS) {
            chmod +x $targetHook
        }

        Write-Success 'Native Git hooks installed successfully'
        return $true

    } catch {
        Write-Error "Failed to install Git hooks: $($_.Exception.Message)"
        return $false
    }
}

function Show-HookInfo {
    Write-Host "`n" + ('=' * 60) -ForegroundColor Cyan
    Write-Host 'PRE-COMMIT HOOKS INFORMATION' -ForegroundColor Cyan
    Write-Host ('=' * 60) -ForegroundColor Cyan

    Write-Info 'The pre-commit hooks will:'
    Write-Host '  â€¢ Check PowerShell code formatting using PSScriptAnalyzer' -ForegroundColor Gray
    Write-Host '  â€¢ Run unit tests to ensure code quality' -ForegroundColor Gray
    Write-Host '  â€¢ Only run on commits that include PowerShell files' -ForegroundColor Gray
    Write-Host '  â€¢ Skip hooks for merge commits' -ForegroundColor Gray

    Write-Host "`nManual Commands:" -ForegroundColor Yellow
    Write-Host '  .\Run-Tests.ps1         - Run all tests and formatting checks' -ForegroundColor Gray
    Write-Host '  .\Format-PowerShell.ps1 -Check  - Check formatting only' -ForegroundColor Gray
    Write-Host '  .\Format-PowerShell.ps1 -Fix    - Fix formatting issues' -ForegroundColor Gray

    if (Test-PreCommitFramework) {
        Write-Host "`nPre-commit Framework Commands:" -ForegroundColor Yellow
        Write-Host '  pre-commit run          - Run hooks on staged files' -ForegroundColor Gray
        Write-Host '  pre-commit run --all-files - Run hooks on all files' -ForegroundColor Gray
        Write-Host '  pre-commit uninstall    - Remove pre-commit hooks' -ForegroundColor Gray
    }
}

function Determine-BestMethod {
    if (Test-PreCommitFramework) {
        Write-Info 'Pre-commit framework detected'
        return 'precommit'
    } elseif (Test-PythonAvailable) {
        Write-Info 'Python available - can install pre-commit framework'
        return 'precommit'
    } else {
        Write-Info 'Python not available - using native Git hooks'
        return 'git'
    }
}

function Main {
    Write-Host 'PowerShell Magic - Hook Setup' -ForegroundColor Cyan
    Write-Host '=============================' -ForegroundColor Cyan

    # Validate we're in a Git repository
    if (-not (Test-GitRepository)) {
        Write-Error 'Not in a Git repository'
        exit 1
    }

    # Determine installation method
    $installMethod = $Method
    if ($Method -eq 'auto') {
        $installMethod = Determine-BestMethod
        Write-Info "Auto-selected method: $installMethod"
    }

    $success = $false

    # Install based on method
    switch ($installMethod) {
        'precommit' {
            if (Test-PreCommitFramework -or (Install-PreCommitFramework)) {
                $success = Install-PreCommitFramework
            } else {
                Write-Warning 'Failed to install pre-commit framework, falling back to Git hooks'
                $success = Install-GitHooks
            }
        }
        'git' {
            $success = Install-GitHooks
        }
        'both' {
            $success1 = Install-PreCommitFramework
            $success2 = Install-GitHooks
            $success = $success1 -or $success2

            if ($success1 -and $success2) {
                Write-Warning 'Both methods installed. Pre-commit framework will take precedence.'
            }
        }
    }

    if ($success) {
        Write-Success 'Pre-commit hooks setup completed!'
        Show-HookInfo
    } else {
        Write-Error 'Failed to setup pre-commit hooks'
        exit 1
    }
}

# Run main function
Main
